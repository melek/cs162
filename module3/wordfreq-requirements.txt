# Extended Word Frequency Program Description
This program takes input and outputs a 'keyword index', where each unique word is output along with the lines of input it appeared on.

# Requirements
    - Words can be assumed to be no more than 10 characters long
    - Only the first 100 unique words need to be counted
    - Only the first 10 lines per unique word need to be tracked
    - The list of lines must be `unsigned int`.
    - The input will be piped, so `cin` will work for collecting input
    
# Program Design Plan
I will create a Keyword data structure which will have the following properties: 
    - A `string` for the word
    - An array of `unsigned int` for the line numbers. 
    - An `unsigned int` for the count, which doubles as the size of the line numbers array.
    - A print() function, which takes a string parameter to prefix output with

The main program will not prompt the user for input, as it expects input to be directed to it at the command line leven at runtime, e.g. './main < input.txt'.

# Verification
Test Case 1: main < input.txt (line numbers will not be included in the file)
1 line
2 Hello World
3 World Hello
4 Another line
5 line

Expected output:
Keyword index: 
0. "Another" occurs on lines 4
1. "Hello" occurs on lines 2 3 
2. "World" occurs on lines 2 3 
3. "line" occurs on lines 1 4 5

# Discussion
My design is a bit light compared to the implementation. In future, I think I'll think through the problem more thoroughly during the design phase.

I think I also misunderstood that the assignment may have wanted nested structs (say, a KeywordIndex struct that contains the array of Keywords). I considered refactoring the code to place some of that logic in a new struct, but decided to stick to my solution since I'm unsure of that requirement.

Additionally, I'm not sure how the requirements wanted the output to be 'Sorted'. The example appears to sort by uppercase A-Z, then lowercase a-z - but I decided to leave it 'sorted' by earliest occurence, which departs slightly from my design in that the verification criteria show output in a different order than the final program. I'm satisfied with the 'in order of appearance' ordering that results.

If I were to sort, then I think I would do so by comparing the first characters of each Keyword object's `word` member variable. A linked list would be a good way to be able to iterate through the list and insertthe new word in the appropriate place as each word is added.
